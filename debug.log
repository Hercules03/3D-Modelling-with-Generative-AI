2025-03-25 00:04:52,362 - __main__ - INFO - Logs cleared for new generation
2025-03-25 00:04:52,362 - __main__ - INFO - ==================================================
2025-03-25 00:04:52,362 - __main__ - INFO - Starting 3D Model Generator
2025-03-25 00:04:52,362 - __main__ - INFO - Time: 2025-03-25T00:04:52.362980
2025-03-25 00:04:52,363 - __main__ - INFO - Configuration:
2025-03-25 00:04:52,363 - __main__ - INFO -   - Max Generation Attempts: 3
2025-03-25 00:04:52,363 - __main__ - INFO -   - Similarity Threshold: 0.70
2025-03-25 00:04:52,363 - __main__ - INFO -   - Output Directory: output
2025-03-25 00:04:52,363 - __main__ - INFO - ==================================================
2025-03-25 00:04:55,031 - __main__ - INFO - Initializing generator with provider: anthropic
2025-03-25 00:04:55,032 - __main__ - DEBUG - Stage Start: Initialization
  Time: 2025-03-25T00:04:55.032475
  Initial Message: Initializing generator
2025-03-25 00:04:55,032 - __main__ - DEBUG - Progress Calculation:
  Completed Weight: 0.5
  Current Stage Weight: 0.1
  Current Progress: 50.0%
  Total Progress: 55.0%
2025-03-25 00:04:55,032 - __main__ - DEBUG - Progress Update:
  Stage: Initialization
  Stage Progress: 50.0%
  Total Progress: 55.0%
  Message: Initializing generator
  Time: 2025-03-25T00:04:55.032789
2025-03-25 00:04:55,032 - __main__ - DEBUG - Progress Bar:
  Progress: 55.0%
  Width: 30
  Filled: 16
  Bar: ================--------------
2025-03-25 00:04:55,118 - urllib3.util.retry - DEBUG - Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
2025-03-25 00:04:55,121 - chromadb.telemetry.product.posthog - INFO - Anonymized telemetry enabled. See                     https://docs.trychroma.com/telemetry for more information.
2025-03-25 00:04:55,214 - chromadb.config - DEBUG - Starting component System
2025-03-25 00:04:55,214 - chromadb.config - DEBUG - Starting component Posthog
2025-03-25 00:04:55,214 - chromadb.config - DEBUG - Starting component OpenTelemetryClient
2025-03-25 00:04:55,214 - chromadb.config - DEBUG - Starting component SqliteDB
2025-03-25 00:04:55,219 - chromadb.config - DEBUG - Starting component SimpleQuotaEnforcer
2025-03-25 00:04:55,219 - chromadb.config - DEBUG - Starting component SimpleRateLimitEnforcer
2025-03-25 00:04:55,219 - chromadb.config - DEBUG - Starting component LocalSegmentManager
2025-03-25 00:04:55,219 - chromadb.config - DEBUG - Starting component LocalExecutor
2025-03-25 00:04:55,219 - chromadb.config - DEBUG - Starting component SegmentAPI
2025-03-25 00:04:55,735 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): us.i.posthog.com:443
2025-03-25 00:04:56,494 - urllib3.connectionpool - DEBUG - https://us.i.posthog.com:443 "POST /batch/ HTTP/1.1" 200 15
2025-03-25 00:04:57,849 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-03-25 00:04:57,850 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): huggingface.co:443
2025-03-25 00:04:58,138 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /sentence-transformers/all-MiniLM-L6-v2/resolve/main/modules.json HTTP/1.1" 200 0
2025-03-25 00:04:58,439 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /sentence-transformers/all-MiniLM-L6-v2/resolve/main/config_sentence_transformers.json HTTP/1.1" 200 0
2025-03-25 00:04:58,747 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /sentence-transformers/all-MiniLM-L6-v2/resolve/main/README.md HTTP/1.1" 200 0
2025-03-25 00:04:59,055 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /sentence-transformers/all-MiniLM-L6-v2/resolve/main/modules.json HTTP/1.1" 200 0
2025-03-25 00:04:59,303 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /sentence-transformers/all-MiniLM-L6-v2/resolve/main/sentence_bert_config.json HTTP/1.1" 200 0
2025-03-25 00:04:59,539 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /sentence-transformers/all-MiniLM-L6-v2/resolve/main/adapter_config.json HTTP/1.1" 404 0
2025-03-25 00:04:59,975 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /sentence-transformers/all-MiniLM-L6-v2/resolve/main/config.json HTTP/1.1" 200 0
2025-03-25 00:05:00,385 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /sentence-transformers/all-MiniLM-L6-v2/resolve/main/tokenizer_config.json HTTP/1.1" 200 0
2025-03-25 00:05:00,696 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "GET /api/models/sentence-transformers/all-MiniLM-L6-v2/revision/main HTTP/1.1" 200 6740
2025-03-25 00:05:01,006 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "GET /api/models/sentence-transformers/all-MiniLM-L6-v2 HTTP/1.1" 200 6740
2025-03-25 00:05:01,036 - __main__ - DEBUG - Progress Calculation:
  Completed Weight: 0.5
  Current Stage Weight: 0.1
  Current Progress: 100.0%
  Total Progress: 60.0%
2025-03-25 00:05:01,036 - __main__ - DEBUG - Progress Update:
  Stage: Initialization
  Stage Progress: 100.0%
  Total Progress: 60.0%
  Message: Generator initialized
  Time: 2025-03-25T00:05:01.036365
2025-03-25 00:05:01,036 - __main__ - DEBUG - Progress Bar:
  Progress: 60.0%
  Width: 30
  Filled: 18
  Bar: ==================------------
2025-03-25 00:05:08,263 - __main__ - INFO - Generating model for: I want a carbinet
2025-03-25 00:05:08,263 - __main__ - DEBUG - Stage Complete: Initialization
  Duration: 13.23s
  Final Progress: 100.0%
2025-03-25 00:05:08,263 - __main__ - DEBUG - Stage Start: Code Generation
  Time: 2025-03-25T00:05:08.263696
  Initial Message: Generation attempt 1
2025-03-25 00:05:08,263 - __main__ - DEBUG - Progress Calculation:
  Completed Weight: 0
  Current Stage Weight: 0.3
  Current Progress: 0.0%
  Total Progress: 0.0%
2025-03-25 00:05:08,263 - __main__ - DEBUG - Progress Update:
  Stage: Code Generation
  Stage Progress: 0.0%
  Total Progress: 0.0%
  Message: Generation attempt 1
  Time: 2025-03-25T00:05:08.263914
2025-03-25 00:05:08,264 - __main__ - DEBUG - Progress Bar:
  Progress: 0.0%
  Width: 30
  Filled: 0
  Bar: ------------------------------
2025-03-25 00:05:08,275 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'When creating a 3D model for "I want a carbinet", what are the fundamental principles and high-level concepts I should consider before implementation?\n\nPlease provide a structured technical analysis in this format:\n\n<think>\nConsider:\n- Core geometric and mathematical principles\n- Essential spatial relationships\n- Fundamental design patterns in 3D modeling\n- Practical constraints and requirements\n</think>\n\n<analysis>\nBased on these principles, let me develop a structured implementation plan:\n\nCORE PRINCIPLES:\n- [List 3-5 key geometric and mathematical concepts that apply to this specific model]\n- [Include relevant physical or material properties]\n- [Note critical design constraints]\n\nSHAPE COMPONENTS:\n- [List primary geometric primitives needed]\n- [Describe spatial relationships]\n- [Note required transformations and operations]\n\nIMPLEMENTATION STEPS:\n1. [Initial setup and base components]\n2. [Component creation and positioning]\n3. [Assembly and transformations]\n4. [Final adjustments and optimization]\n\nMEASUREMENT CONSIDERATIONS:\n- [Key proportions and ratios]\n- [Critical dimensions]\n- [Scale factors]\n</analysis>\n\nPlease maintain the XML-style tags and structured format shown above.', 'role': 'user'}], 'model': 'claude-3-7-sonnet-20250219', 'stream': True, 'temperature': 0.7}}
2025-03-25 00:05:08,314 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api2.qyfxw.cn/v1/chat/completions
2025-03-25 00:05:08,314 - httpcore.connection - DEBUG - connect_tcp.started host='api2.qyfxw.cn' port=443 local_address=None timeout=None socket_options=None
2025-03-25 00:05:08,328 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11f9f5400>
2025-03-25 00:05:08,328 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x1085cbf50> server_hostname='api2.qyfxw.cn' timeout=None
2025-03-25 00:05:08,342 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11f9fc2d0>
2025-03-25 00:05:08,342 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-25 00:05:08,343 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-25 00:05:08,343 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-25 00:05:08,343 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-25 00:05:08,343 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-25 00:05:10,183 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Server', b'nginx'), (b'Date', b'Mon, 24 Mar 2025 16:05:10 GMT'), (b'Content-Type', b'text/event-stream'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Cache-Control', b'no-cache'), (b'X-Oneapi-Request-Id', b'20250325000508368939816VlBJWtTn'), (b'Strict-Transport-Security', b'max-age=31536000')])
2025-03-25 00:05:10,186 - httpx - INFO - HTTP Request: POST https://api2.qyfxw.cn/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-25 00:05:10,186 - openai._base_client - DEBUG - HTTP Response: POST https://api2.qyfxw.cn/v1/chat/completions "200 OK" Headers({'server': 'nginx', 'date': 'Mon, 24 Mar 2025 16:05:10 GMT', 'content-type': 'text/event-stream', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache', 'x-oneapi-request-id': '20250325000508368939816VlBJWtTn', 'strict-transport-security': 'max-age=31536000'})
2025-03-25 00:05:10,186 - openai._base_client - DEBUG - request_id: None
2025-03-25 00:05:10,188 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-25 00:05:28,526 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-25 00:05:28,527 - httpcore.http11 - DEBUG - response_closed.started
2025-03-25 00:05:28,527 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-25 00:05:42,743 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'When creating a 3D model for "I want a carbinet", what are the fundamental principles and high-level concepts I should consider before implementation?\n\nPlease provide a structured technical analysis in this format:\n\n<think>\nConsider:\n- Core geometric and mathematical principles\n- Essential spatial relationships\n- Fundamental design patterns in 3D modeling\n- Practical constraints and requirements\n</think>\n\n<analysis>\nBased on these principles, let me develop a structured implementation plan:\n\nCORE PRINCIPLES:\n- [List 3-5 key geometric and mathematical concepts that apply to this specific model]\n- [Include relevant physical or material properties]\n- [Note critical design constraints]\n\nSHAPE COMPONENTS:\n- [List primary geometric primitives needed]\n- [Describe spatial relationships]\n- [Note required transformations and operations]\n\nIMPLEMENTATION STEPS:\n1. [Initial setup and base components]\n2. [Component creation and positioning]\n3. [Assembly and transformations]\n4. [Final adjustments and optimization]\n\nMEASUREMENT CONSIDERATIONS:\n- [Key proportions and ratios]\n- [Critical dimensions]\n- [Scale factors]\n</analysis>\n\nPlease maintain the XML-style tags and structured format shown above.', 'role': 'user'}], 'model': 'claude-3-7-sonnet-20250219', 'stream': True, 'temperature': 0.7}}
2025-03-25 00:05:42,743 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api2.qyfxw.cn/v1/chat/completions
2025-03-25 00:05:42,743 - httpcore.connection - DEBUG - connect_tcp.started host='api2.qyfxw.cn' port=443 local_address=None timeout=None socket_options=None
2025-03-25 00:05:42,757 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11f9fd950>
2025-03-25 00:05:42,757 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10882c050> server_hostname='api2.qyfxw.cn' timeout=None
2025-03-25 00:05:42,771 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11f8b7950>
2025-03-25 00:05:42,771 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-25 00:05:42,771 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-25 00:05:42,771 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-25 00:05:42,771 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-25 00:05:42,771 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-25 00:05:43,919 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Server', b'nginx'), (b'Date', b'Mon, 24 Mar 2025 16:05:43 GMT'), (b'Content-Type', b'text/event-stream'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Cache-Control', b'no-cache'), (b'X-Oneapi-Request-Id', b'202503250005427945010785cPVWMEQ'), (b'Strict-Transport-Security', b'max-age=31536000')])
2025-03-25 00:05:43,919 - httpx - INFO - HTTP Request: POST https://api2.qyfxw.cn/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-25 00:05:43,919 - openai._base_client - DEBUG - HTTP Response: POST https://api2.qyfxw.cn/v1/chat/completions "200 OK" Headers({'server': 'nginx', 'date': 'Mon, 24 Mar 2025 16:05:43 GMT', 'content-type': 'text/event-stream', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache', 'x-oneapi-request-id': '202503250005427945010785cPVWMEQ', 'strict-transport-security': 'max-age=31536000'})
2025-03-25 00:05:43,919 - openai._base_client - DEBUG - request_id: None
2025-03-25 00:05:43,919 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-25 00:06:01,058 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-25 00:06:01,059 - httpcore.http11 - DEBUG - response_closed.started
2025-03-25 00:06:01,060 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-25 00:06:01,065 - httpcore.connection - DEBUG - connect_tcp.started host='localhost' port=11434 local_address=None timeout=None socket_options=None
2025-03-25 00:06:01,067 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11f9f0640>
2025-03-25 00:06:01,067 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-25 00:06:01,067 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-25 00:06:01,067 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-25 00:06:01,067 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-25 00:06:01,067 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-25 00:06:01,608 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Mon, 24 Mar 2025 16:06:01 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-03-25 00:06:01,609 - httpx - INFO - HTTP Request: POST http://localhost:11434/api/chat "HTTP/1.1 200 OK"
2025-03-25 00:06:01,609 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-25 00:06:02,162 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-25 00:06:02,162 - httpcore.http11 - DEBUG - response_closed.started
2025-03-25 00:06:02,162 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-25 00:06:02,165 - httpcore.connection - DEBUG - connect_tcp.started host='localhost' port=11434 local_address=None timeout=None socket_options=None
2025-03-25 00:06:02,165 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11f915a30>
2025-03-25 00:06:02,165 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-25 00:06:02,166 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-25 00:06:02,166 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-25 00:06:02,166 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-25 00:06:02,166 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-25 00:06:05,405 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Mon, 24 Mar 2025 16:06:05 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-03-25 00:06:05,406 - httpx - INFO - HTTP Request: POST http://localhost:11434/api/chat "HTTP/1.1 200 OK"
2025-03-25 00:06:05,406 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-25 00:06:17,333 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-25 00:06:17,334 - httpcore.http11 - DEBUG - response_closed.started
2025-03-25 00:06:17,335 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-25 00:06:17,346 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': "Analyze the following request and identify the key OpenSCAD components needed:\n            I want a carbinet\n            <think>\nFor a cabinet 3D model, I need to consider:\n- Geometric principles: rectangular prisms, planes, and potential curved surfaces\n- Spatial relationships between cabinet components (body, doors, shelves, hardware)\n- Design patterns like component-based modeling and parametric design\n- Practical constraints including material thickness, hardware clearances, and functional requirements\n- Common cabinet proportions and ergonomic considerations\n</think>\n\n<analysis>\nBased on these principles, let me develop a structured implementation plan:\n\nCORE PRINCIPLES:\n- Euclidean geometry for rectangular prism construction and planar surfaces\n- Boolean operations for creating interior spaces and joinery details\n- Material thickness considerations for realistic modeling of wood/material components\n- Hierarchical component relationships (parent-child) for proper assembly dynamics\n- Parametric constraints to maintain proper relationships during design changes\n\nSHAPE COMPONENTS:\n- Rectangular prisms for cabinet body, doors, drawers, and shelves\n- Cylindrical primitives for hardware elements (handles, hinges)\n- Planar surfaces for interior divisions and backing\n- Edge treatments requiring profile curves and sweeps/extrusions\n- Negative space volumes for interior storage areas\n\nIMPLEMENTATION STEPS:\n1. Establish overall cabinet dimensions and create base rectangular prism\n2. Define material thickness and create offset interior volume via boolean operation\n3. Model and position interior components (shelves, dividers) with proper clearances\n4. Create door/drawer components with appropriate offsets for operation\n5. Add hardware elements (hinges, handles, slides) at functional positions\n6. Apply fillets/chamfers for realistic edge treatment\n\nMEASUREMENT CONSIDERATIONS:\n- Standard cabinet depths: 12-24 inches (kitchen), 16-20 inches (storage)\n- Height considerations: 30-36 inches (base), 12-42 inches (wall mounted)\n- Door clearance: minimum 2mm gap between doors and 3-5mm from edges\n- Hardware positioning: handles typically 2-3 inches from edges\n- Material thickness: typically 18-22mm for cabinet bodies, 12-18mm for shelving\n</analysis>\n            \n            List only the core components needed (modules, primitives, transformations, boolean operations).\n            Respond with a valid JSON array of objects, each with 'type' and 'name' fields.", 'role': 'user'}], 'model': 'claude-3-7-sonnet-20250219', 'stream': True, 'temperature': 0.7}}
2025-03-25 00:06:17,347 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api2.qyfxw.cn/v1/chat/completions
2025-03-25 00:06:17,347 - httpcore.connection - DEBUG - close.started
2025-03-25 00:06:17,348 - httpcore.connection - DEBUG - close.complete
2025-03-25 00:06:17,348 - httpcore.connection - DEBUG - connect_tcp.started host='api2.qyfxw.cn' port=443 local_address=None timeout=None socket_options=None
2025-03-25 00:06:17,364 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x1228f0380>
2025-03-25 00:06:17,364 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10882c050> server_hostname='api2.qyfxw.cn' timeout=None
2025-03-25 00:06:17,379 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x1228f0270>
2025-03-25 00:06:17,379 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-25 00:06:17,379 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-25 00:06:17,379 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-25 00:06:17,379 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-25 00:06:17,379 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-25 00:06:18,518 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Server', b'nginx'), (b'Date', b'Mon, 24 Mar 2025 16:06:18 GMT'), (b'Content-Type', b'text/event-stream'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Cache-Control', b'no-cache'), (b'X-Oneapi-Request-Id', b'20250325000617401776821EZLVrTCg'), (b'Strict-Transport-Security', b'max-age=31536000')])
2025-03-25 00:06:18,518 - httpx - INFO - HTTP Request: POST https://api2.qyfxw.cn/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-25 00:06:18,518 - openai._base_client - DEBUG - HTTP Response: POST https://api2.qyfxw.cn/v1/chat/completions "200 OK" Headers({'server': 'nginx', 'date': 'Mon, 24 Mar 2025 16:06:18 GMT', 'content-type': 'text/event-stream', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache', 'x-oneapi-request-id': '20250325000617401776821EZLVrTCg', 'strict-transport-security': 'max-age=31536000'})
2025-03-25 00:06:18,518 - openai._base_client - DEBUG - request_id: None
2025-03-25 00:06:18,518 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-25 00:06:20,932 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-25 00:06:20,933 - httpcore.http11 - DEBUG - response_closed.started
2025-03-25 00:06:20,933 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-25 00:06:21,103 - chromadb.config - DEBUG - Starting component PersistentLocalHnswSegment
2025-03-25 00:06:21,109 - chromadb.segment.impl.vector.local_persistent_hnsw - WARNING - Add of existing embedding ID: modern_4c42c67f
2025-03-25 00:06:21,115 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert in OpenSCAD 3D modeling. Your task is to generate OpenSCAD code based on the user\'s description.\n\nBASIC KNOWLEDGE:\n        \nOpenSCAD is a 3D modeling tool that uses a scripting language to create 3D objects. Here are some basic concepts:\n\nBasic shapes (3D):\n1. cube(size = [x,y,z], center = true/false); - Creates a rectangular prism\n2. sphere(r=radius); - Creates a sphere\n3. cylinder(h = height, r1 = BottomRadius, r2 = TopRadius, center = true/false); - Creates a cylinder\n4. polyhedron( points = [ [X0, Y0, Z0], [X1, Y1, Z1], ... ], faces = [ [P0, P1, P2, P3, ...], ... ], convexity = N); - Creates complex shapes\n\nTransformations:\n1. translate([x,y,z]) - Moves object\n2. rotate(a = deg_a, v = [x, y, z]) - Rotates object (degrees)\n3. scale([x,y,z]) - Scales object\n4. resize([x,y,z],auto,convexity) - Modifies the size of the child object to match the given x,y,z.\n5. mirror([x,y,z]) - Creates a mirror image of a child element across a specified plane\n6. multmatrix(m) - Multiplies the geometry of all child elements with the given affine transformation matrix\n7. offset(r|delta,chamfer) - generates a new 2d interior or exterior outline from an existing outline\n8. hull() - Displays the convex hull of child nodes.\n9. minkowski(convexity) - Creates a minkowski sum of child nodes.\n\nBoolean operations:\n1. union() - Combines objects\n2. difference() - Subtracts second object from first\n3. intersection() - Shows overlap between objects\n\nBasic Syntax:\n1. Variables: var = value; (e.g., radius = 10;)\n2. Comments: // Single line comment, /* Multi-line comment */\n3. Mathematical Operators: +, -, *, /, %, ^\n4. Comparison Operators: ==, !=, <, <=, >, >=\n5. Logical Operators: &&, ||, !\n6. Conditional Statement: if (condition) { ... } else { ... }\n7. Loops:\n- for (i = [start:step:end]) { ... }\n- for (i = [value1, value2, ...]) { ... }\n8. Modules:\n- Define: module name(parameters) { ... }\n- Call: name(parameters);\n9. Functions:\n- Define: function name(parameters) = expression;\n- Call: name(parameters)\n10. Echo Command: echo("text", variable);\n11. Children: Using $children and children() for module composition\n\n\nRELEVANT EXAMPLES:\n        [{\'description\': \'I want a basket\', \'metadata\': {\'categories\': \'container\', \'code\': \'// Woven Basket Model\\n// This model creates a parametric woven basket with optional handle\\n\\n// Main parameters\\nbasket_radius = 50;         // Basket radius at top\\nbasket_height = 40;         // Height of the basket\\nbasket_bottom_radius = 40;  // Radius at the bottom (smaller creates tapered basket)\\nweave_thickness = 2;        // Thickness of the weaving strands\\nweave_width = 5;            // Width of the weaving strands\\nvertical_strands = 24;      // Number of vertical strands\\nhorizontal_rings = 10;      // Number of horizontal rings\\nwith_handle = true;         // Whether to add a handle\\nhandle_thickness = 3;       // Handle thickness\\nhandle_width = 8;           // Handle width\\nhandle_height = 30;         // Handle height above basket\\n\\n// Module for creating a single vertical strand\\nmodule vertical_strand() {\\n    // Calculate the arc length for proper tapering\\n    height_angle = atan((basket_radius - basket_bottom_radius) / basket_height);\\n    \\n    // Create the vertical strand with a slight bend\\n    hull() {\\n        translate([basket_bottom_radius, 0, 0])\\n            rotate([0, 90, 0])\\n                cylinder(h=weave_thickness, r=weave_width/2, center=true);\\n        \\n        translate([basket_radius, 0, basket_height])\\n            rotate([0, 90, 0])\\n                cylinder(h=weave_thickness, r=weave_width/2, center=true);\\n    }\\n}\\n\\n// Module for creating a horizontal ring at specified height\\nmodule horizontal_ring(height_pos) {\\n    // Calculate radius at this height\\n    radius_at_height = basket_bottom_radius + \\n                      (basket_radius - basket_bottom_radius) * height_pos / basket_height;\\n    \\n    difference() {\\n        // Outer cylinder\\n        cylinder(h=weave_width, r=radius_at_height, center=true);\\n        // Inner cylinder\\n        cylinder(h=weave_width + 1, r=radius_at_height - weave_thickness, center=true);\\n    }\\n}\\n\\n// Module for creating the basket handle\\nmodule handle() {\\n    handle_radius = basket_radius * 0.9;\\n    \\n    difference() {\\n        // Outer torus\\n        rotate_extrude(angle=180)\\n            translate([handle_radius, 0, 0])\\n                circle(r=handle_width/2);\\n        \\n        // Inner cutout\\n        rotate_extrude(angle=180)\\n            translate([handle_radius, 0, 0])\\n                circle(r=(handle_width/2) - handle_thickness);\\n        \\n        // Cut the bottom half\\n        translate([0, 0, -handle_radius - handle_width])\\n            cube([handle_radius * 2 + handle_width, handle_radius * 2 + handle_width, handle_radius * 2], center=true);\\n    }\\n}\\n\\n// Generate the basket\\nmodule basket() {\\n    // Create vertical strands\\n    for (i = [0 : vertical_strands - 1]) {\\n        angle = i * 360 / vertical_strands;\\n        rotate([0, 0, angle])\\n            vertical_strand();\\n    }\\n    \\n    // Create horizontal rings\\n    for (i = [0 : horizontal_rings - 1]) {\\n        height_pos = (i + 0.5) * basket_height / horizontal_rings;\\n        \\n        // Alternate the rings to create weaving effect\\n        translate([0, 0, height_pos])\\n            horizontal_ring(height_pos);\\n    }\\n    \\n    // Add the handle if requested\\n    if (with_handle) {\\n        translate([0, 0, basket_height + handle_height/2])\\n            handle();\\n    }\\n    \\n    // Add a base\\n    cylinder(h=weave_thickness, r=basket_bottom_radius - weave_thickness/2);\\n}\\n\\n// Render the basket\\nbasket();\', \'complexity\': \'SIMPLE\', \'object_type\': \'basket\', \'similar_objects\': \'\', \'timestamp\': \'2025-03-22T18:01:02.284319\', \'type\': \'scad_generation\', \'use_case\': \'storage\', \'user_accepted\': True}, \'scores\': {\'final\': 0.15000000000000002, \'similarity\': 0.0, \'step_back\': {\'principles\': 0.0, \'abstractions\': 0.0, \'approach\': 0.0}, \'component_match\': 0.0, \'metadata_match\': 0.5, \'complexity\': 0.5}}]\n\nAnalysis to consider:\nCORE PRINCIPLES:\n                    - Euclidean geometry with emphasis on rectangular prisms and planar surfaces\n- Boolean operations (union, difference) for creating door openings and joinery\n- Material thickness considerations for realistic construction\n- Structural integrity requiring appropriate support elements and load distribution\n- Parametric relationships between components for design flexibility\n                    \n                    SHAPE COMPONENTS:\n                    - Primary rectangular prism for cabinet body/carcass\n- Secondary rectangular prisms for doors, drawers, and shelving\n- Cylindrical elements for handles, knobs, and hinges\n- Planar surfaces for back panels, side panels, and shelves\n- Edge treatments requiring fillets or chamfers for realistic appearance\n                    \n                    IMPLEMENTATION STEPS:\n                    1. Define cabinet dimensions and create base carcass structure with material thickness\n2. Model internal components (shelves, dividers) with proper spatial relationships\n3. Create door and drawer components with appropriate offsets for movement\n4. Add hardware components (hinges, handles, drawer slides) with correct positioning\n5. Apply materials, textures, and finishing details\n\nUSER REQUEST:\nI want a carbinet\n\nPlease generate OpenSCAD code that satisfies the user\'s request. Follow these guidelines:\n1. Use clear variable names and comments\n2. Break down complex shapes into modules\n3. Use proper indentation and formatting\n4. Include helpful comments explaining the code\n5. Wrap the code in <code> tags or ```scad code blocks\n\nYour response should ONLY contain the OpenSCAD code, properly wrapped in tags. Do not include any explanations or additional text.\n\nOpenSCAD code:', 'role': 'user'}], 'model': 'claude-3-7-sonnet-20250219', 'stream': True, 'temperature': 0.7}}
2025-03-25 00:06:21,115 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api2.qyfxw.cn/v1/chat/completions
2025-03-25 00:06:21,115 - httpcore.connection - DEBUG - close.started
2025-03-25 00:06:21,116 - httpcore.connection - DEBUG - close.complete
2025-03-25 00:06:21,116 - httpcore.connection - DEBUG - connect_tcp.started host='api2.qyfxw.cn' port=443 local_address=None timeout=None socket_options=None
2025-03-25 00:06:21,129 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11f921050>
2025-03-25 00:06:21,129 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x1085cbf50> server_hostname='api2.qyfxw.cn' timeout=None
2025-03-25 00:06:21,143 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11f921950>
2025-03-25 00:06:21,143 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-25 00:06:21,144 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-25 00:06:21,144 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-25 00:06:21,144 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-25 00:06:21,144 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-25 00:06:21,163 - urllib3.connectionpool - DEBUG - Resetting dropped connection: us.i.posthog.com
2025-03-25 00:06:21,659 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 503, b'Service Unavailable', [(b'Server', b'nginx'), (b'Date', b'Mon, 24 Mar 2025 16:06:21 GMT'), (b'Content-Type', b'application/json; charset=utf-8'), (b'Content-Length', b'251'), (b'Connection', b'keep-alive'), (b'X-Oneapi-Request-Id', b'20250325000621169752897wMGE2iiE')])
2025-03-25 00:06:21,660 - httpx - INFO - HTTP Request: POST https://api2.qyfxw.cn/v1/chat/completions "HTTP/1.1 503 Service Unavailable"
2025-03-25 00:06:21,660 - openai._base_client - DEBUG - HTTP Response: POST https://api2.qyfxw.cn/v1/chat/completions "503 Service Unavailable" Headers({'server': 'nginx', 'date': 'Mon, 24 Mar 2025 16:06:21 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '251', 'connection': 'keep-alive', 'x-oneapi-request-id': '20250325000621169752897wMGE2iiE'})
2025-03-25 00:06:21,660 - openai._base_client - DEBUG - request_id: None
2025-03-25 00:06:21,660 - openai._base_client - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/hercules/GitHub/3D-Modelling-with-Generative-AI/.venv/lib/python3.13/site-packages/openai/_base_client.py", line 1002, in _request
    response.raise_for_status()
    ~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/Users/hercules/GitHub/3D-Modelling-with-Generative-AI/.venv/lib/python3.13/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '503 Service Unavailable' for url 'https://api2.qyfxw.cn/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503
2025-03-25 00:06:21,670 - openai._base_client - DEBUG - Retrying due to status code 503
2025-03-25 00:06:21,673 - httpcore.http11 - DEBUG - response_closed.started
2025-03-25 00:06:21,673 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-25 00:06:21,673 - openai._base_client - DEBUG - 2 retries left
2025-03-25 00:06:21,674 - openai._base_client - INFO - Retrying request to /chat/completions in 0.410726 seconds
2025-03-25 00:06:22,000 - urllib3.connectionpool - DEBUG - https://us.i.posthog.com:443 "POST /batch/ HTTP/1.1" 200 15
2025-03-25 00:06:22,090 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert in OpenSCAD 3D modeling. Your task is to generate OpenSCAD code based on the user\'s description.\n\nBASIC KNOWLEDGE:\n        \nOpenSCAD is a 3D modeling tool that uses a scripting language to create 3D objects. Here are some basic concepts:\n\nBasic shapes (3D):\n1. cube(size = [x,y,z], center = true/false); - Creates a rectangular prism\n2. sphere(r=radius); - Creates a sphere\n3. cylinder(h = height, r1 = BottomRadius, r2 = TopRadius, center = true/false); - Creates a cylinder\n4. polyhedron( points = [ [X0, Y0, Z0], [X1, Y1, Z1], ... ], faces = [ [P0, P1, P2, P3, ...], ... ], convexity = N); - Creates complex shapes\n\nTransformations:\n1. translate([x,y,z]) - Moves object\n2. rotate(a = deg_a, v = [x, y, z]) - Rotates object (degrees)\n3. scale([x,y,z]) - Scales object\n4. resize([x,y,z],auto,convexity) - Modifies the size of the child object to match the given x,y,z.\n5. mirror([x,y,z]) - Creates a mirror image of a child element across a specified plane\n6. multmatrix(m) - Multiplies the geometry of all child elements with the given affine transformation matrix\n7. offset(r|delta,chamfer) - generates a new 2d interior or exterior outline from an existing outline\n8. hull() - Displays the convex hull of child nodes.\n9. minkowski(convexity) - Creates a minkowski sum of child nodes.\n\nBoolean operations:\n1. union() - Combines objects\n2. difference() - Subtracts second object from first\n3. intersection() - Shows overlap between objects\n\nBasic Syntax:\n1. Variables: var = value; (e.g., radius = 10;)\n2. Comments: // Single line comment, /* Multi-line comment */\n3. Mathematical Operators: +, -, *, /, %, ^\n4. Comparison Operators: ==, !=, <, <=, >, >=\n5. Logical Operators: &&, ||, !\n6. Conditional Statement: if (condition) { ... } else { ... }\n7. Loops:\n- for (i = [start:step:end]) { ... }\n- for (i = [value1, value2, ...]) { ... }\n8. Modules:\n- Define: module name(parameters) { ... }\n- Call: name(parameters);\n9. Functions:\n- Define: function name(parameters) = expression;\n- Call: name(parameters)\n10. Echo Command: echo("text", variable);\n11. Children: Using $children and children() for module composition\n\n\nRELEVANT EXAMPLES:\n        [{\'description\': \'I want a basket\', \'metadata\': {\'categories\': \'container\', \'code\': \'// Woven Basket Model\\n// This model creates a parametric woven basket with optional handle\\n\\n// Main parameters\\nbasket_radius = 50;         // Basket radius at top\\nbasket_height = 40;         // Height of the basket\\nbasket_bottom_radius = 40;  // Radius at the bottom (smaller creates tapered basket)\\nweave_thickness = 2;        // Thickness of the weaving strands\\nweave_width = 5;            // Width of the weaving strands\\nvertical_strands = 24;      // Number of vertical strands\\nhorizontal_rings = 10;      // Number of horizontal rings\\nwith_handle = true;         // Whether to add a handle\\nhandle_thickness = 3;       // Handle thickness\\nhandle_width = 8;           // Handle width\\nhandle_height = 30;         // Handle height above basket\\n\\n// Module for creating a single vertical strand\\nmodule vertical_strand() {\\n    // Calculate the arc length for proper tapering\\n    height_angle = atan((basket_radius - basket_bottom_radius) / basket_height);\\n    \\n    // Create the vertical strand with a slight bend\\n    hull() {\\n        translate([basket_bottom_radius, 0, 0])\\n            rotate([0, 90, 0])\\n                cylinder(h=weave_thickness, r=weave_width/2, center=true);\\n        \\n        translate([basket_radius, 0, basket_height])\\n            rotate([0, 90, 0])\\n                cylinder(h=weave_thickness, r=weave_width/2, center=true);\\n    }\\n}\\n\\n// Module for creating a horizontal ring at specified height\\nmodule horizontal_ring(height_pos) {\\n    // Calculate radius at this height\\n    radius_at_height = basket_bottom_radius + \\n                      (basket_radius - basket_bottom_radius) * height_pos / basket_height;\\n    \\n    difference() {\\n        // Outer cylinder\\n        cylinder(h=weave_width, r=radius_at_height, center=true);\\n        // Inner cylinder\\n        cylinder(h=weave_width + 1, r=radius_at_height - weave_thickness, center=true);\\n    }\\n}\\n\\n// Module for creating the basket handle\\nmodule handle() {\\n    handle_radius = basket_radius * 0.9;\\n    \\n    difference() {\\n        // Outer torus\\n        rotate_extrude(angle=180)\\n            translate([handle_radius, 0, 0])\\n                circle(r=handle_width/2);\\n        \\n        // Inner cutout\\n        rotate_extrude(angle=180)\\n            translate([handle_radius, 0, 0])\\n                circle(r=(handle_width/2) - handle_thickness);\\n        \\n        // Cut the bottom half\\n        translate([0, 0, -handle_radius - handle_width])\\n            cube([handle_radius * 2 + handle_width, handle_radius * 2 + handle_width, handle_radius * 2], center=true);\\n    }\\n}\\n\\n// Generate the basket\\nmodule basket() {\\n    // Create vertical strands\\n    for (i = [0 : vertical_strands - 1]) {\\n        angle = i * 360 / vertical_strands;\\n        rotate([0, 0, angle])\\n            vertical_strand();\\n    }\\n    \\n    // Create horizontal rings\\n    for (i = [0 : horizontal_rings - 1]) {\\n        height_pos = (i + 0.5) * basket_height / horizontal_rings;\\n        \\n        // Alternate the rings to create weaving effect\\n        translate([0, 0, height_pos])\\n            horizontal_ring(height_pos);\\n    }\\n    \\n    // Add the handle if requested\\n    if (with_handle) {\\n        translate([0, 0, basket_height + handle_height/2])\\n            handle();\\n    }\\n    \\n    // Add a base\\n    cylinder(h=weave_thickness, r=basket_bottom_radius - weave_thickness/2);\\n}\\n\\n// Render the basket\\nbasket();\', \'complexity\': \'SIMPLE\', \'object_type\': \'basket\', \'similar_objects\': \'\', \'timestamp\': \'2025-03-22T18:01:02.284319\', \'type\': \'scad_generation\', \'use_case\': \'storage\', \'user_accepted\': True}, \'scores\': {\'final\': 0.15000000000000002, \'similarity\': 0.0, \'step_back\': {\'principles\': 0.0, \'abstractions\': 0.0, \'approach\': 0.0}, \'component_match\': 0.0, \'metadata_match\': 0.5, \'complexity\': 0.5}}]\n\nAnalysis to consider:\nCORE PRINCIPLES:\n                    - Euclidean geometry with emphasis on rectangular prisms and planar surfaces\n- Boolean operations (union, difference) for creating door openings and joinery\n- Material thickness considerations for realistic construction\n- Structural integrity requiring appropriate support elements and load distribution\n- Parametric relationships between components for design flexibility\n                    \n                    SHAPE COMPONENTS:\n                    - Primary rectangular prism for cabinet body/carcass\n- Secondary rectangular prisms for doors, drawers, and shelving\n- Cylindrical elements for handles, knobs, and hinges\n- Planar surfaces for back panels, side panels, and shelves\n- Edge treatments requiring fillets or chamfers for realistic appearance\n                    \n                    IMPLEMENTATION STEPS:\n                    1. Define cabinet dimensions and create base carcass structure with material thickness\n2. Model internal components (shelves, dividers) with proper spatial relationships\n3. Create door and drawer components with appropriate offsets for movement\n4. Add hardware components (hinges, handles, drawer slides) with correct positioning\n5. Apply materials, textures, and finishing details\n\nUSER REQUEST:\nI want a carbinet\n\nPlease generate OpenSCAD code that satisfies the user\'s request. Follow these guidelines:\n1. Use clear variable names and comments\n2. Break down complex shapes into modules\n3. Use proper indentation and formatting\n4. Include helpful comments explaining the code\n5. Wrap the code in <code> tags or ```scad code blocks\n\nYour response should ONLY contain the OpenSCAD code, properly wrapped in tags. Do not include any explanations or additional text.\n\nOpenSCAD code:', 'role': 'user'}], 'model': 'claude-3-7-sonnet-20250219', 'stream': True, 'temperature': 0.7}}
2025-03-25 00:06:22,091 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api2.qyfxw.cn/v1/chat/completions
2025-03-25 00:06:22,091 - httpcore.connection - DEBUG - connect_tcp.started host='api2.qyfxw.cn' port=443 local_address=None timeout=None socket_options=None
2025-03-25 00:06:22,105 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11f9ec8c0>
2025-03-25 00:06:22,105 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x1085cbf50> server_hostname='api2.qyfxw.cn' timeout=None
2025-03-25 00:06:22,122 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x11f9ec6e0>
2025-03-25 00:06:22,122 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-25 00:06:22,123 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-25 00:06:22,123 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-25 00:06:22,123 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-25 00:06:22,123 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-25 00:06:23,433 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Server', b'nginx'), (b'Date', b'Mon, 24 Mar 2025 16:06:23 GMT'), (b'Content-Type', b'text/event-stream'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Cache-Control', b'no-cache'), (b'X-Oneapi-Request-Id', b'20250325000622147637462Z7gsXwVa'), (b'Strict-Transport-Security', b'max-age=31536000')])
2025-03-25 00:06:23,433 - httpx - INFO - HTTP Request: POST https://api2.qyfxw.cn/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-25 00:06:23,433 - openai._base_client - DEBUG - HTTP Response: POST https://api2.qyfxw.cn/v1/chat/completions "200 OK" Headers({'server': 'nginx', 'date': 'Mon, 24 Mar 2025 16:06:23 GMT', 'content-type': 'text/event-stream', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache', 'x-oneapi-request-id': '20250325000622147637462Z7gsXwVa', 'strict-transport-security': 'max-age=31536000'})
2025-03-25 00:06:23,433 - openai._base_client - DEBUG - request_id: None
2025-03-25 00:06:23,433 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-25 00:06:35,834 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-25 00:06:35,836 - httpcore.http11 - DEBUG - response_closed.started
2025-03-25 00:06:35,836 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-25 00:07:14,739 - __main__ - DEBUG - Progress Calculation:
  Completed Weight: 0
  Current Stage Weight: 0.3
  Current Progress: 100.0%
  Total Progress: 30.0%
2025-03-25 00:07:14,740 - __main__ - DEBUG - Progress Update:
  Stage: Code Generation
  Stage Progress: 100.0%
  Total Progress: 30.0%
  Message: Generation complete
  Time: 2025-03-25T00:07:14.740760
2025-03-25 00:07:14,740 - __main__ - DEBUG - Progress Bar:
  Progress: 30.0%
  Width: 30
  Filled: 9
  Bar: =========---------------------
2025-03-25 00:07:14,741 - __main__ - INFO - 
Generation Summary:
2025-03-25 00:07:14,741 - __main__ - INFO -   Description: I want a carbinet
2025-03-25 00:07:14,741 - __main__ - INFO -   Provider: anthropic
2025-03-25 00:07:14,741 - __main__ - INFO -   Attempts: 1
2025-03-25 00:07:14,741 - __main__ - INFO -   Stage Summary:
Stage Duration Summary:
  Initialization: 13.23s

Total Duration: 13.23s
2025-03-25 00:07:20,592 - __main__ - INFO - 
Session Summary:
2025-03-25 00:07:20,593 - __main__ - INFO - Stage Duration Summary:
  Initialization: 13.23s

Total Duration: 13.23s
2025-03-25 00:07:20,593 - __main__ - INFO - Session ended at: 2025-03-25T00:07:20.593106
2025-03-25 00:07:20,593 - __main__ - INFO - ==================================================
