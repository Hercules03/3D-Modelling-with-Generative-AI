2025-03-24 17:52:33,793 - __main__ - INFO - Logs cleared for new generation
2025-03-24 17:52:33,793 - __main__ - INFO - ==================================================
2025-03-24 17:52:33,793 - __main__ - INFO - Starting 3D Model Generator
2025-03-24 17:52:33,793 - __main__ - INFO - Time: 2025-03-24T17:52:33.793683
2025-03-24 17:52:33,793 - __main__ - INFO - Configuration:
2025-03-24 17:52:33,793 - __main__ - INFO -   - Max Generation Attempts: 3
2025-03-24 17:52:33,793 - __main__ - INFO -   - Similarity Threshold: 0.70
2025-03-24 17:52:33,793 - __main__ - INFO -   - Output Directory: output
2025-03-24 17:52:33,793 - __main__ - INFO - ==================================================
2025-03-24 17:52:49,998 - __main__ - WARNING - Invalid choice: I want a pirate sword please
2025-03-24 17:52:53,140 - __main__ - INFO - Initializing generator with provider: anthropic
2025-03-24 17:52:53,141 - __main__ - DEBUG - Stage Start: Initialization
  Time: 2025-03-24T17:52:53.141118
  Initial Message: Initializing generator
2025-03-24 17:52:53,141 - __main__ - DEBUG - Progress Calculation:
  Completed Weight: 0.5
  Current Stage Weight: 0.1
  Current Progress: 50.0%
  Total Progress: 55.0%
2025-03-24 17:52:53,141 - __main__ - DEBUG - Progress Update:
  Stage: Initialization
  Stage Progress: 50.0%
  Total Progress: 55.0%
  Message: Initializing generator
  Time: 2025-03-24T17:52:53.141323
2025-03-24 17:52:53,141 - __main__ - DEBUG - Progress Bar:
  Progress: 55.0%
  Width: 30
  Filled: 16
  Bar: ================--------------
2025-03-24 17:52:53,218 - urllib3.util.retry - DEBUG - Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
2025-03-24 17:52:53,223 - chromadb.telemetry.product.posthog - INFO - Anonymized telemetry enabled. See                     https://docs.trychroma.com/telemetry for more information.
2025-03-24 17:52:53,377 - chromadb.config - DEBUG - Starting component System
2025-03-24 17:52:53,377 - chromadb.config - DEBUG - Starting component Posthog
2025-03-24 17:52:53,377 - chromadb.config - DEBUG - Starting component OpenTelemetryClient
2025-03-24 17:52:53,377 - chromadb.config - DEBUG - Starting component SqliteDB
2025-03-24 17:52:53,383 - chromadb.config - DEBUG - Starting component SimpleQuotaEnforcer
2025-03-24 17:52:53,383 - chromadb.config - DEBUG - Starting component SimpleRateLimitEnforcer
2025-03-24 17:52:53,383 - chromadb.config - DEBUG - Starting component LocalSegmentManager
2025-03-24 17:52:53,383 - chromadb.config - DEBUG - Starting component LocalExecutor
2025-03-24 17:52:53,383 - chromadb.config - DEBUG - Starting component SegmentAPI
2025-03-24 17:52:53,892 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): us.i.posthog.com:443
2025-03-24 17:52:54,585 - urllib3.connectionpool - DEBUG - https://us.i.posthog.com:443 "POST /batch/ HTTP/1.1" 200 15
2025-03-24 17:52:57,373 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: all-MiniLM-L6-v2
2025-03-24 17:52:57,375 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): huggingface.co:443
2025-03-24 17:52:57,755 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /sentence-transformers/all-MiniLM-L6-v2/resolve/main/modules.json HTTP/1.1" 200 0
2025-03-24 17:52:57,982 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /sentence-transformers/all-MiniLM-L6-v2/resolve/main/config_sentence_transformers.json HTTP/1.1" 200 0
2025-03-24 17:52:58,266 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /sentence-transformers/all-MiniLM-L6-v2/resolve/main/README.md HTTP/1.1" 200 0
2025-03-24 17:52:58,879 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /sentence-transformers/all-MiniLM-L6-v2/resolve/main/modules.json HTTP/1.1" 200 0
2025-03-24 17:52:59,195 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /sentence-transformers/all-MiniLM-L6-v2/resolve/main/sentence_bert_config.json HTTP/1.1" 200 0
2025-03-24 17:52:59,457 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /sentence-transformers/all-MiniLM-L6-v2/resolve/main/adapter_config.json HTTP/1.1" 404 0
2025-03-24 17:52:59,699 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /sentence-transformers/all-MiniLM-L6-v2/resolve/main/config.json HTTP/1.1" 200 0
2025-03-24 17:53:00,109 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "HEAD /sentence-transformers/all-MiniLM-L6-v2/resolve/main/tokenizer_config.json HTTP/1.1" 200 0
2025-03-24 17:53:00,394 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "GET /api/models/sentence-transformers/all-MiniLM-L6-v2/revision/main HTTP/1.1" 200 6740
2025-03-24 17:53:00,646 - urllib3.connectionpool - DEBUG - https://huggingface.co:443 "GET /api/models/sentence-transformers/all-MiniLM-L6-v2 HTTP/1.1" 200 6740
2025-03-24 17:53:00,671 - __main__ - DEBUG - Progress Calculation:
  Completed Weight: 0.5
  Current Stage Weight: 0.1
  Current Progress: 100.0%
  Total Progress: 60.0%
2025-03-24 17:53:00,672 - __main__ - DEBUG - Progress Update:
  Stage: Initialization
  Stage Progress: 100.0%
  Total Progress: 60.0%
  Message: Generator initialized
  Time: 2025-03-24T17:53:00.672172
2025-03-24 17:53:00,672 - __main__ - DEBUG - Progress Bar:
  Progress: 60.0%
  Width: 30
  Filled: 18
  Bar: ==================------------
2025-03-24 17:53:18,402 - __main__ - INFO - Generating model for: I want a pirate sword thankyou
2025-03-24 17:53:18,402 - __main__ - DEBUG - Stage Complete: Initialization
  Duration: 25.26s
  Final Progress: 100.0%
2025-03-24 17:53:18,402 - __main__ - DEBUG - Stage Start: Code Generation
  Time: 2025-03-24T17:53:18.402863
  Initial Message: Generation attempt 1
2025-03-24 17:53:18,402 - __main__ - DEBUG - Progress Calculation:
  Completed Weight: 0
  Current Stage Weight: 0.3
  Current Progress: 0.0%
  Total Progress: 0.0%
2025-03-24 17:53:18,403 - __main__ - DEBUG - Progress Update:
  Stage: Code Generation
  Stage Progress: 0.0%
  Total Progress: 0.0%
  Message: Generation attempt 1
  Time: 2025-03-24T17:53:18.403019
2025-03-24 17:53:18,403 - __main__ - DEBUG - Progress Bar:
  Progress: 0.0%
  Width: 30
  Filled: 0
  Bar: ------------------------------
2025-03-24 17:53:18,412 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'When creating a 3D model for "I want a pirate sword thankyou", what are the fundamental principles and high-level concepts I should consider before implementation?\n\nPlease provide a structured technical analysis in this format:\n\n<think>\nConsider:\n- Core geometric and mathematical principles\n- Essential spatial relationships\n- Fundamental design patterns in 3D modeling\n- Practical constraints and requirements\n</think>\n\n<analysis>\nBased on these principles, let me develop a structured implementation plan:\n\nCORE PRINCIPLES:\n- [List 3-5 key geometric and mathematical concepts that apply to this specific model]\n- [Include relevant physical or material properties]\n- [Note critical design constraints]\n\nSHAPE COMPONENTS:\n- [List primary geometric primitives needed]\n- [Describe spatial relationships]\n- [Note required transformations and operations]\n\nIMPLEMENTATION STEPS:\n1. [Initial setup and base components]\n2. [Component creation and positioning]\n3. [Assembly and transformations]\n4. [Final adjustments and optimization]\n\nMEASUREMENT CONSIDERATIONS:\n- [Key proportions and ratios]\n- [Critical dimensions]\n- [Scale factors]\n</analysis>\n\nPlease maintain the XML-style tags and structured format shown above.', 'role': 'user'}], 'model': 'claude-3-7-sonnet-20250219', 'stream': True, 'temperature': 0.7}}
2025-03-24 17:53:18,448 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api2.qyfxw.cn/v1/chat/completions
2025-03-24 17:53:18,449 - httpcore.connection - DEBUG - connect_tcp.started host='api2.qyfxw.cn' port=443 local_address=None timeout=None socket_options=None
2025-03-24 17:53:18,459 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x14b5e4c20>
2025-03-24 17:53:18,459 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10d7bff50> server_hostname='api2.qyfxw.cn' timeout=None
2025-03-24 17:53:18,472 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x14b507250>
2025-03-24 17:53:18,472 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-24 17:53:18,472 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-24 17:53:18,472 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-24 17:53:18,472 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-24 17:53:18,472 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-24 17:53:19,993 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Server', b'nginx'), (b'Date', b'Mon, 24 Mar 2025 09:53:19 GMT'), (b'Content-Type', b'text/event-stream'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Cache-Control', b'no-cache'), (b'X-Oneapi-Request-Id', b'20250324175318450092661iqbyING6'), (b'Strict-Transport-Security', b'max-age=31536000')])
2025-03-24 17:53:19,995 - httpx - INFO - HTTP Request: POST https://api2.qyfxw.cn/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-24 17:53:19,996 - openai._base_client - DEBUG - HTTP Response: POST https://api2.qyfxw.cn/v1/chat/completions "200 OK" Headers({'server': 'nginx', 'date': 'Mon, 24 Mar 2025 09:53:19 GMT', 'content-type': 'text/event-stream', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache', 'x-oneapi-request-id': '20250324175318450092661iqbyING6', 'strict-transport-security': 'max-age=31536000'})
2025-03-24 17:53:19,996 - openai._base_client - DEBUG - request_id: None
2025-03-24 17:53:19,997 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-24 17:53:35,129 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-24 17:53:35,131 - httpcore.http11 - DEBUG - response_closed.started
2025-03-24 17:53:35,131 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-24 17:53:48,580 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'When creating a 3D model for "I want a pirate sword thankyou", what are the fundamental principles and high-level concepts I should consider before implementation?\n\nPlease provide a structured technical analysis in this format:\n\n<think>\nConsider:\n- Core geometric and mathematical principles\n- Essential spatial relationships\n- Fundamental design patterns in 3D modeling\n- Practical constraints and requirements\n</think>\n\n<analysis>\nBased on these principles, let me develop a structured implementation plan:\n\nCORE PRINCIPLES:\n- [List 3-5 key geometric and mathematical concepts that apply to this specific model]\n- [Include relevant physical or material properties]\n- [Note critical design constraints]\n\nSHAPE COMPONENTS:\n- [List primary geometric primitives needed]\n- [Describe spatial relationships]\n- [Note required transformations and operations]\n\nIMPLEMENTATION STEPS:\n1. [Initial setup and base components]\n2. [Component creation and positioning]\n3. [Assembly and transformations]\n4. [Final adjustments and optimization]\n\nMEASUREMENT CONSIDERATIONS:\n- [Key proportions and ratios]\n- [Critical dimensions]\n- [Scale factors]\n</analysis>\n\nPlease maintain the XML-style tags and structured format shown above.', 'role': 'user'}], 'model': 'claude-3-7-sonnet-20250219', 'stream': True, 'temperature': 0.7}}
2025-03-24 17:53:48,580 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api2.qyfxw.cn/v1/chat/completions
2025-03-24 17:53:48,581 - httpcore.connection - DEBUG - connect_tcp.started host='api2.qyfxw.cn' port=443 local_address=None timeout=None socket_options=None
2025-03-24 17:53:48,773 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x14f504410>
2025-03-24 17:53:48,773 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10e3580e0> server_hostname='api2.qyfxw.cn' timeout=None
2025-03-24 17:53:48,813 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x14b4f2fd0>
2025-03-24 17:53:48,813 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-24 17:53:48,813 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-24 17:53:48,813 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-24 17:53:48,814 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-24 17:53:48,814 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-24 17:53:49,324 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 503, b'Service Unavailable', [(b'Server', b'nginx'), (b'Date', b'Mon, 24 Mar 2025 09:53:49 GMT'), (b'Content-Type', b'application/json; charset=utf-8'), (b'Content-Length', b'251'), (b'Connection', b'keep-alive'), (b'X-Oneapi-Request-Id', b'20250324175348795836370frqJk9kR')])
2025-03-24 17:53:49,325 - httpx - INFO - HTTP Request: POST https://api2.qyfxw.cn/v1/chat/completions "HTTP/1.1 503 Service Unavailable"
2025-03-24 17:53:49,325 - openai._base_client - DEBUG - HTTP Response: POST https://api2.qyfxw.cn/v1/chat/completions "503 Service Unavailable" Headers({'server': 'nginx', 'date': 'Mon, 24 Mar 2025 09:53:49 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '251', 'connection': 'keep-alive', 'x-oneapi-request-id': '20250324175348795836370frqJk9kR'})
2025-03-24 17:53:49,325 - openai._base_client - DEBUG - request_id: None
2025-03-24 17:53:49,326 - openai._base_client - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/hercules/GitHub/3D-Modelling-with-Generative-AI/.venv/lib/python3.13/site-packages/openai/_base_client.py", line 1002, in _request
    response.raise_for_status()
    ~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/Users/hercules/GitHub/3D-Modelling-with-Generative-AI/.venv/lib/python3.13/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '503 Service Unavailable' for url 'https://api2.qyfxw.cn/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503
2025-03-24 17:53:49,331 - openai._base_client - DEBUG - Retrying due to status code 503
2025-03-24 17:53:49,331 - httpcore.http11 - DEBUG - response_closed.started
2025-03-24 17:53:49,332 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-24 17:53:49,332 - openai._base_client - DEBUG - 2 retries left
2025-03-24 17:53:49,332 - openai._base_client - INFO - Retrying request to /chat/completions in 0.475063 seconds
2025-03-24 17:53:49,812 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'When creating a 3D model for "I want a pirate sword thankyou", what are the fundamental principles and high-level concepts I should consider before implementation?\n\nPlease provide a structured technical analysis in this format:\n\n<think>\nConsider:\n- Core geometric and mathematical principles\n- Essential spatial relationships\n- Fundamental design patterns in 3D modeling\n- Practical constraints and requirements\n</think>\n\n<analysis>\nBased on these principles, let me develop a structured implementation plan:\n\nCORE PRINCIPLES:\n- [List 3-5 key geometric and mathematical concepts that apply to this specific model]\n- [Include relevant physical or material properties]\n- [Note critical design constraints]\n\nSHAPE COMPONENTS:\n- [List primary geometric primitives needed]\n- [Describe spatial relationships]\n- [Note required transformations and operations]\n\nIMPLEMENTATION STEPS:\n1. [Initial setup and base components]\n2. [Component creation and positioning]\n3. [Assembly and transformations]\n4. [Final adjustments and optimization]\n\nMEASUREMENT CONSIDERATIONS:\n- [Key proportions and ratios]\n- [Critical dimensions]\n- [Scale factors]\n</analysis>\n\nPlease maintain the XML-style tags and structured format shown above.', 'role': 'user'}], 'model': 'claude-3-7-sonnet-20250219', 'stream': True, 'temperature': 0.7}}
2025-03-24 17:53:49,814 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api2.qyfxw.cn/v1/chat/completions
2025-03-24 17:53:49,814 - httpcore.connection - DEBUG - connect_tcp.started host='api2.qyfxw.cn' port=443 local_address=None timeout=None socket_options=None
2025-03-24 17:53:49,826 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x14b4f3bb0>
2025-03-24 17:53:49,827 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10e3580e0> server_hostname='api2.qyfxw.cn' timeout=None
2025-03-24 17:53:49,840 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x14b52e0f0>
2025-03-24 17:53:49,840 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-24 17:53:49,841 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-24 17:53:49,841 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-24 17:53:49,841 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-24 17:53:49,841 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-24 17:53:51,025 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Server', b'nginx'), (b'Date', b'Mon, 24 Mar 2025 09:53:50 GMT'), (b'Content-Type', b'text/event-stream'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Cache-Control', b'no-cache'), (b'X-Oneapi-Request-Id', b'202503241753498184456426amEnUPv'), (b'Strict-Transport-Security', b'max-age=31536000')])
2025-03-24 17:53:51,026 - httpx - INFO - HTTP Request: POST https://api2.qyfxw.cn/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-24 17:53:51,026 - openai._base_client - DEBUG - HTTP Response: POST https://api2.qyfxw.cn/v1/chat/completions "200 OK" Headers({'server': 'nginx', 'date': 'Mon, 24 Mar 2025 09:53:50 GMT', 'content-type': 'text/event-stream', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache', 'x-oneapi-request-id': '202503241753498184456426amEnUPv', 'strict-transport-security': 'max-age=31536000'})
2025-03-24 17:53:51,027 - openai._base_client - DEBUG - request_id: None
2025-03-24 17:53:51,027 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-24 17:54:08,855 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-24 17:54:08,856 - httpcore.http11 - DEBUG - response_closed.started
2025-03-24 17:54:08,857 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-24 17:54:08,863 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert in 3D modeling and OpenSCAD. Analyze this 3D model description and extract key metadata.\n\nDescription: I want a pirate sword thankyou\n\nExtract the following metadata and format it as a valid JSON object with these fields:\n1. "object_type": Main category/type of the object (e.g., "mug", "chair", "box")\n2. "dimensions": Dictionary of any mentioned measurements or proportions\n3. "features": List of key characteristics or components\n4. "materials": List of any specified or implied materials\n5. "complexity": One of ["SIMPLE", "MEDIUM", "COMPLEX"] based on features and structure\n6. "style": Design style (e.g., "Modern", "Traditional", "Industrial", "Minimalist")\n7. "use_case": Primary intended use or purpose\n8. "geometric_properties": List of key geometric characteristics (e.g., "symmetrical", "curved", "angular")\n9. "technical_requirements": List of specific technical considerations\n\nOnly include fields where information can be confidently extracted from the description.\nFormat numbers consistently (use metric units when possible).\nIf a field cannot be determined, omit it from the JSON rather than using placeholder values.\n\nReturn ONLY the JSON object, no additional text or explanation.', 'role': 'user'}], 'model': 'claude-3-7-sonnet-20250219', 'stream': True, 'temperature': 0.7}}
2025-03-24 17:54:08,864 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api2.qyfxw.cn/v1/chat/completions
2025-03-24 17:54:08,864 - httpcore.connection - DEBUG - connect_tcp.started host='api2.qyfxw.cn' port=443 local_address=None timeout=None socket_options=None
2025-03-24 17:54:08,876 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x14f500380>
2025-03-24 17:54:08,876 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10e358200> server_hostname='api2.qyfxw.cn' timeout=None
2025-03-24 17:54:08,889 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x14f500270>
2025-03-24 17:54:08,889 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-24 17:54:08,890 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-24 17:54:08,890 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-24 17:54:08,890 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-24 17:54:08,890 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-24 17:54:09,070 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 503, b'Service Unavailable', [(b'Server', b'nginx'), (b'Date', b'Mon, 24 Mar 2025 09:54:09 GMT'), (b'Content-Type', b'application/json; charset=utf-8'), (b'Content-Length', b'251'), (b'Connection', b'keep-alive'), (b'X-Oneapi-Request-Id', b'202503241754088658183971ESNSh03')])
2025-03-24 17:54:09,071 - httpx - INFO - HTTP Request: POST https://api2.qyfxw.cn/v1/chat/completions "HTTP/1.1 503 Service Unavailable"
2025-03-24 17:54:09,071 - openai._base_client - DEBUG - HTTP Response: POST https://api2.qyfxw.cn/v1/chat/completions "503 Service Unavailable" Headers({'server': 'nginx', 'date': 'Mon, 24 Mar 2025 09:54:09 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '251', 'connection': 'keep-alive', 'x-oneapi-request-id': '202503241754088658183971ESNSh03'})
2025-03-24 17:54:09,071 - openai._base_client - DEBUG - request_id: None
2025-03-24 17:54:09,072 - openai._base_client - DEBUG - Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "/Users/hercules/GitHub/3D-Modelling-with-Generative-AI/.venv/lib/python3.13/site-packages/openai/_base_client.py", line 1002, in _request
    response.raise_for_status()
    ~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/Users/hercules/GitHub/3D-Modelling-with-Generative-AI/.venv/lib/python3.13/site-packages/httpx/_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Server error '503 Service Unavailable' for url 'https://api2.qyfxw.cn/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503
2025-03-24 17:54:09,073 - openai._base_client - DEBUG - Retrying due to status code 503
2025-03-24 17:54:09,074 - httpcore.http11 - DEBUG - response_closed.started
2025-03-24 17:54:09,074 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-24 17:54:09,074 - openai._base_client - DEBUG - 2 retries left
2025-03-24 17:54:09,074 - openai._base_client - INFO - Retrying request to /chat/completions in 0.478685 seconds
2025-03-24 17:54:09,555 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert in 3D modeling and OpenSCAD. Analyze this 3D model description and extract key metadata.\n\nDescription: I want a pirate sword thankyou\n\nExtract the following metadata and format it as a valid JSON object with these fields:\n1. "object_type": Main category/type of the object (e.g., "mug", "chair", "box")\n2. "dimensions": Dictionary of any mentioned measurements or proportions\n3. "features": List of key characteristics or components\n4. "materials": List of any specified or implied materials\n5. "complexity": One of ["SIMPLE", "MEDIUM", "COMPLEX"] based on features and structure\n6. "style": Design style (e.g., "Modern", "Traditional", "Industrial", "Minimalist")\n7. "use_case": Primary intended use or purpose\n8. "geometric_properties": List of key geometric characteristics (e.g., "symmetrical", "curved", "angular")\n9. "technical_requirements": List of specific technical considerations\n\nOnly include fields where information can be confidently extracted from the description.\nFormat numbers consistently (use metric units when possible).\nIf a field cannot be determined, omit it from the JSON rather than using placeholder values.\n\nReturn ONLY the JSON object, no additional text or explanation.', 'role': 'user'}], 'model': 'claude-3-7-sonnet-20250219', 'stream': True, 'temperature': 0.7}}
2025-03-24 17:54:09,557 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api2.qyfxw.cn/v1/chat/completions
2025-03-24 17:54:09,557 - httpcore.connection - DEBUG - connect_tcp.started host='api2.qyfxw.cn' port=443 local_address=None timeout=None socket_options=None
2025-03-24 17:54:09,569 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x14b531350>
2025-03-24 17:54:09,569 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10e358200> server_hostname='api2.qyfxw.cn' timeout=None
2025-03-24 17:54:09,580 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x14b530e50>
2025-03-24 17:54:09,581 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-24 17:54:09,581 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-24 17:54:09,581 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-24 17:54:09,581 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-24 17:54:09,582 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-24 17:54:10,741 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Server', b'nginx'), (b'Date', b'Mon, 24 Mar 2025 09:54:10 GMT'), (b'Content-Type', b'text/event-stream'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Cache-Control', b'no-cache'), (b'X-Oneapi-Request-Id', b'20250324175409558464121tPBNCbR2'), (b'Strict-Transport-Security', b'max-age=31536000')])
2025-03-24 17:54:10,742 - httpx - INFO - HTTP Request: POST https://api2.qyfxw.cn/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-24 17:54:10,743 - openai._base_client - DEBUG - HTTP Response: POST https://api2.qyfxw.cn/v1/chat/completions "200 OK" Headers({'server': 'nginx', 'date': 'Mon, 24 Mar 2025 09:54:10 GMT', 'content-type': 'text/event-stream', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache', 'x-oneapi-request-id': '20250324175409558464121tPBNCbR2', 'strict-transport-security': 'max-age=31536000'})
2025-03-24 17:54:10,743 - openai._base_client - DEBUG - request_id: None
2025-03-24 17:54:10,743 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-24 17:54:12,601 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-24 17:54:12,601 - httpcore.http11 - DEBUG - response_closed.started
2025-03-24 17:54:12,601 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-24 17:54:12,604 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': "Analyze the following request and identify the key OpenSCAD components needed:\n            I want a pirate sword thankyou\n            <think>\nFor a pirate sword 3D model, I need to consider:\n- The sword's geometry involves curved surfaces for the blade, guard, and handle\n- Material properties will affect both visual appearance and structural integrity\n- Historical accuracy vs. stylistic choices for a pirate-themed sword\n- Polygon count and mesh topology for efficient rendering\n- Proper proportions between components for believable appearance\n</think>\n\n<analysis>\nBased on these principles, let me develop a structured implementation plan:\n\nCORE PRINCIPLES:\n- Curvature continuity: Ensuring smooth transitions between surfaces on the blade and guard\n- Rotational symmetry: The sword will have bilateral symmetry along its primary axis\n- Surface normal orientation: Critical for proper light reflection and material application\n- Mesh density distribution: Higher polygon concentration in areas of greater detail\n- Material properties: Metallic reflectance for blade, different textures for handle/guard\n\nSHAPE COMPONENTS:\n- Primary blade: Elongated curved surface with tapered point and possible fuller (blood groove)\n- Crossguard: Perpendicular component with characteristic curved or ornate pirate styling\n- Handle/grip: Cylindrical base with wrapping or texture details\n- Pommel: Counterweight at end of handle, often decorative in pirate swords\n- Optional basket hilt or knuckle guard: Complex curved protective elements\n\nIMPLEMENTATION STEPS:\n1. Create blade profile curve and extrude with appropriate thickness tapering\n2. Model crossguard with reference to blade width and historical pirate sword references\n3. Develop handle with proper ergonomic proportions and decorative elements\n4. Add pommel and any additional decorative elements (gems, insignias, etc.)\n5. Apply appropriate edge flow and topology for smooth surfaces and efficient mesh\n\nMEASUREMENT CONSIDERATIONS:\n- Overall length: Typically 85-100cm for a standard cutlass or sabre\n- Blade-to-handle ratio: Approximately 4:1 for balanced appearance\n- Guard width: 1.5-2× the blade width at base\n- Handle diameter: 3-4cm for ergonomic grip\n- Edge thickness: Gradually tapering from 3-4mm at spine to fine edge\n</analysis>\n            \n            List only the core components needed (modules, primitives, transformations, boolean operations).\n            Respond with a valid JSON array of objects, each with 'type' and 'name' fields.", 'role': 'user'}], 'model': 'claude-3-7-sonnet-20250219', 'stream': True, 'temperature': 0.7}}
2025-03-24 17:54:12,605 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api2.qyfxw.cn/v1/chat/completions
2025-03-24 17:54:12,605 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-24 17:54:12,605 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-24 17:54:12,605 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-24 17:54:12,605 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-24 17:54:12,605 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-24 17:54:13,940 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Server', b'nginx'), (b'Date', b'Mon, 24 Mar 2025 09:54:13 GMT'), (b'Content-Type', b'text/event-stream'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Cache-Control', b'no-cache'), (b'X-Oneapi-Request-Id', b'20250324175412584021103d47cKdL0'), (b'Strict-Transport-Security', b'max-age=31536000')])
2025-03-24 17:54:13,941 - httpx - INFO - HTTP Request: POST https://api2.qyfxw.cn/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-24 17:54:13,941 - openai._base_client - DEBUG - HTTP Response: POST https://api2.qyfxw.cn/v1/chat/completions "200 OK" Headers({'server': 'nginx', 'date': 'Mon, 24 Mar 2025 09:54:13 GMT', 'content-type': 'text/event-stream', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache', 'x-oneapi-request-id': '20250324175412584021103d47cKdL0', 'strict-transport-security': 'max-age=31536000'})
2025-03-24 17:54:13,942 - openai._base_client - DEBUG - request_id: None
2025-03-24 17:54:13,942 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-24 17:54:20,642 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-24 17:54:20,643 - httpcore.http11 - DEBUG - response_closed.started
2025-03-24 17:54:20,643 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-24 17:54:20,783 - chromadb.config - DEBUG - Starting component PersistentLocalHnswSegment
2025-03-24 17:54:20,787 - chromadb.segment.impl.vector.local_persistent_hnsw - WARNING - Add of existing embedding ID: modern_4c42c67f
2025-03-24 17:54:20,796 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'content': 'You are an expert in OpenSCAD 3D modeling. Your task is to generate OpenSCAD code based on the user\'s description.\n\nBASIC KNOWLEDGE:\n        \nOpenSCAD is a 3D modeling tool that uses a scripting language to create 3D objects. Here are some basic concepts:\n\nBasic shapes (3D):\n1. cube(size = [x,y,z], center = true/false); - Creates a rectangular prism\n2. sphere(r=radius); - Creates a sphere\n3. cylinder(h = height, r1 = BottomRadius, r2 = TopRadius, center = true/false); - Creates a cylinder\n4. polyhedron( points = [ [X0, Y0, Z0], [X1, Y1, Z1], ... ], faces = [ [P0, P1, P2, P3, ...], ... ], convexity = N); - Creates complex shapes\n\nTransformations:\n1. translate([x,y,z]) - Moves object\n2. rotate(a = deg_a, v = [x, y, z]) - Rotates object (degrees)\n3. scale([x,y,z]) - Scales object\n4. resize([x,y,z],auto,convexity) - Modifies the size of the child object to match the given x,y,z.\n5. mirror([x,y,z]) - Creates a mirror image of a child element across a specified plane\n6. multmatrix(m) - Multiplies the geometry of all child elements with the given affine transformation matrix\n7. offset(r|delta,chamfer) - generates a new 2d interior or exterior outline from an existing outline\n8. hull() - Displays the convex hull of child nodes.\n9. minkowski(convexity) - Creates a minkowski sum of child nodes.\n\nBoolean operations:\n1. union() - Combines objects\n2. difference() - Subtracts second object from first\n3. intersection() - Shows overlap between objects\n\nBasic Syntax:\n1. Variables: var = value; (e.g., radius = 10;)\n2. Comments: // Single line comment, /* Multi-line comment */\n3. Mathematical Operators: +, -, *, /, %, ^\n4. Comparison Operators: ==, !=, <, <=, >, >=\n5. Logical Operators: &&, ||, !\n6. Conditional Statement: if (condition) { ... } else { ... }\n7. Loops:\n- for (i = [start:step:end]) { ... }\n- for (i = [value1, value2, ...]) { ... }\n8. Modules:\n- Define: module name(parameters) { ... }\n- Call: name(parameters);\n9. Functions:\n- Define: function name(parameters) = expression;\n- Call: name(parameters)\n10. Echo Command: echo("text", variable);\n11. Children: Using $children and children() for module composition\n\n\nRELEVANT EXAMPLES:\n        []\n\nAnalysis to consider:\nCORE PRINCIPLES:\n                    - Bilateral symmetry along the longitudinal axis for balanced weapon design\n- Proper weight distribution principles (center of mass considerations)\n- Surface curvature continuity for realistic blade edges and bevels\n- Material-specific geometric properties (metal reflectivity, handle wrapping texture)\n- Historical accuracy balanced with pirate-specific stylistic elements\n                    \n                    SHAPE COMPONENTS:\n                    - Primary blade: Elongated curved or straight triangular prism with beveled edges\n- Cross-guard: Perpendicular component with characteristic curvature (often S-shaped for pirate cutlasses)\n- Handle/grip: Cylindrical form with ergonomic tapering and texture mapping\n- Pommel: Counterweight element with period-appropriate detailing\n- Optional basket hilt or knuckle bow for cutlass variants\n                    \n                    IMPLEMENTATION STEPS:\n                    1. Create base blade profile using spline curves; extrude with appropriate thickness and taper\n2. Model cross-guard with proper intersection to blade; ensure clean topology at junction\n3. Develop handle with appropriate grip diameter and length; apply wrapping pattern\n4. Add pommel and decorative elements; ensure proper weight appearance\n5. Apply edge bevels, weathering details, and surface imperfections for realism\n\nUSER REQUEST:\nI want a pirate sword thankyou\n\nPlease generate OpenSCAD code that satisfies the user\'s request. Follow these guidelines:\n1. Use clear variable names and comments\n2. Break down complex shapes into modules\n3. Use proper indentation and formatting\n4. Include helpful comments explaining the code\n5. Wrap the code in <code> tags or ```scad code blocks\n\nYour response should ONLY contain the OpenSCAD code, properly wrapped in tags. Do not include any explanations or additional text.\n\nOpenSCAD code:', 'role': 'user'}], 'model': 'claude-3-7-sonnet-20250219', 'stream': True, 'temperature': 0.7}}
2025-03-24 17:54:20,796 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api2.qyfxw.cn/v1/chat/completions
2025-03-24 17:54:20,796 - httpcore.connection - DEBUG - close.started
2025-03-24 17:54:20,797 - httpcore.connection - DEBUG - close.complete
2025-03-24 17:54:20,797 - httpcore.connection - DEBUG - connect_tcp.started host='api2.qyfxw.cn' port=443 local_address=None timeout=None socket_options=None
2025-03-24 17:54:20,808 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x14b5ec5f0>
2025-03-24 17:54:20,809 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x10d7bff50> server_hostname='api2.qyfxw.cn' timeout=None
2025-03-24 17:54:20,831 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x14b5ec6e0>
2025-03-24 17:54:20,831 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-03-24 17:54:20,831 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-03-24 17:54:20,831 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-03-24 17:54:20,831 - httpcore.http11 - DEBUG - send_request_body.complete
2025-03-24 17:54:20,831 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-03-24 17:54:20,847 - urllib3.connectionpool - DEBUG - Resetting dropped connection: us.i.posthog.com
2025-03-24 17:54:21,526 - urllib3.connectionpool - DEBUG - https://us.i.posthog.com:443 "POST /batch/ HTTP/1.1" 200 15
2025-03-24 17:54:21,978 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Server', b'nginx'), (b'Date', b'Mon, 24 Mar 2025 09:54:21 GMT'), (b'Content-Type', b'text/event-stream'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Cache-Control', b'no-cache'), (b'X-Oneapi-Request-Id', b'20250324175420807558901iLGrvowy'), (b'Strict-Transport-Security', b'max-age=31536000')])
2025-03-24 17:54:21,978 - httpx - INFO - HTTP Request: POST https://api2.qyfxw.cn/v1/chat/completions "HTTP/1.1 200 OK"
2025-03-24 17:54:21,978 - openai._base_client - DEBUG - HTTP Response: POST https://api2.qyfxw.cn/v1/chat/completions "200 OK" Headers({'server': 'nginx', 'date': 'Mon, 24 Mar 2025 09:54:21 GMT', 'content-type': 'text/event-stream', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'cache-control': 'no-cache', 'x-oneapi-request-id': '20250324175420807558901iLGrvowy', 'strict-transport-security': 'max-age=31536000'})
2025-03-24 17:54:21,979 - openai._base_client - DEBUG - request_id: None
2025-03-24 17:54:21,979 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-03-24 17:54:50,451 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-03-24 17:54:50,454 - httpcore.http11 - DEBUG - response_closed.started
2025-03-24 17:54:50,454 - httpcore.http11 - DEBUG - response_closed.complete
2025-03-24 17:55:25,620 - __main__ - DEBUG - Progress Calculation:
  Completed Weight: 0
  Current Stage Weight: 0.3
  Current Progress: 100.0%
  Total Progress: 30.0%
2025-03-24 17:55:25,621 - __main__ - DEBUG - Progress Update:
  Stage: Code Generation
  Stage Progress: 100.0%
  Total Progress: 30.0%
  Message: Generation complete
  Time: 2025-03-24T17:55:25.621870
2025-03-24 17:55:25,622 - __main__ - DEBUG - Progress Bar:
  Progress: 30.0%
  Width: 30
  Filled: 9
  Bar: =========---------------------
2025-03-24 17:55:25,622 - __main__ - INFO - 
Generation Summary:
2025-03-24 17:55:25,622 - __main__ - INFO -   Description: I want a pirate sword thankyou
2025-03-24 17:55:25,622 - __main__ - INFO -   Provider: anthropic
2025-03-24 17:55:25,622 - __main__ - INFO -   Attempts: 1
2025-03-24 17:55:25,622 - __main__ - INFO -   Stage Summary:
Stage Duration Summary:
  Initialization: 25.26s

Total Duration: 25.26s
2025-03-24 17:55:29,133 - __main__ - INFO - 
Session Summary:
2025-03-24 17:55:29,134 - __main__ - INFO - Stage Duration Summary:
  Initialization: 25.26s

Total Duration: 25.26s
2025-03-24 17:55:29,134 - __main__ - INFO - Session ended at: 2025-03-24T17:55:29.134147
2025-03-24 17:55:29,134 - __main__ - INFO - ==================================================
